apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: validate-rolebinding
spec:
  crd:
    spec:
      names:
        kind: validate-rolebinding
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package main
        
        
        name = input.review.object.metadata.name
        
        namespace = input.review.object.metadata.namespace
        
        subjects = input.review.object.subjects
        
        roleRef = input.review.object.roleRef
        
        wildcard_resource_is_in_list(list) {
        	list[_] = "*"
        }
        
        violation[{"msg": msg}] {
        	not name
        
        	msg := sprintf("rolebinding %v has no name provided", [name])
        }
        
        violation[{"msg": msg}] {
        	not namespace
        
        	msg := sprintf("rolebinding %v has no namespace provided", [name])
        }
        
        violation[{"msg": msg}] {
        	not subjects
        
        	msg := sprintf("rolebinding %v does not have a subjects section", [name])
        }
        
        violation[{"msg": msg}] {
        	not roleRef
        
        	msg := sprintf("rolebinding %v does not have a roleRef section", [name])
        }
        
        violation[{"msg": msg}] {
        	subjectList := subjects[_]
        	not exists_in_list(subjectList.kind, allowed_subject_kinds)
        
        	msg := sprintf("at least one subject in rolebinding %v references a not allowed kind. Only serviceaccount or group is allowed", [name])
        }
        
        violation[{"msg": msg}] {
        	subjectList := subjects[_]
        	not subjectList.name
        
        	msg := sprintf("at least one subject in rolebinding %v does not have a name provided", [name])
        }
        
        violation[{"msg": msg}] {
        	not roleRef.kind == "Role"
        
        	msg := sprintf("ClusterRoles are not allowed for rolebinding %v", [name])
        }
        
        violation[{"msg": msg}] {
        	not roleRef.name
        
        	msg := sprintf("roleref in rolebinding %v does not have a name provided", [name])
        }
        
        required_labels {
        	input.review.object.metadata.labels["app.kubernetes.io/name"]
        	input.review.object.metadata.labels["app.kubernetes.io/instance"]
        	input.review.object.metadata.labels["app.kubernetes.io/version"]
        	input.review.object.metadata.labels["app.kubernetes.io/component"]
        	input.review.object.metadata.labels["app.kubernetes.io/part-of"]
        	input.review.object.metadata.labels["app.kubernetes.io/managed-by"]
        }
        
        # a list of ressources which needes a serviceaccount
        serviceaccount_needed = [
        	"unittest-ansparservice",
        	"unittest-authservice",
        	"unittest-certservice",
        	"unittest-mysql",
        ]
        
        allowed_kinds = [
        	"ConfigMap",
        	"Secret",
        	"Service",
        	"Deployment",
        	"PersistentVolume",
        	"PersistentVolumeClaim",
        	"HorizontalPodAutoscaler",
        	"Ingress",
        	"Job",
        	"Role",
        	"RoleBinding",
        	"ServiceAccount",
        	"PodDisruptionBudget",
        	"NetworkPolicy",
        	"Pod",
        	"PodSecurityPolicy",
        ]
        
        allowed_subject_kinds = [
        	"ServiceAccount",
        	"Group",
        ]
        
        trusted_registries = [
        	"luke19",
        	"curlimages",
        ]
        
        violation[{"msg": msg}] {
        	not required_labels
        	msg = sprintf("%s of kind %s must include Kubernetes recommended labels: https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/#labels", [name, input.review.object.kind])
        }
        
        exists_in_list(element, list) {
        	val := list[_]
        	element == val
        }
        
        violation[{"msg": msg}] {
        	val := input.review.object.kind
        	not exists_in_list(input.review.object.kind, allowed_kinds)
        
        	msg = sprintf("%v is not a allowed kind", [val])
        }
        
        startswith_in_list(element, list) {
        	startswith(element, list[_])
        }
